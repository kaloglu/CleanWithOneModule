// @see https://hackernoon.com/android-how-to-add-gradle-dependencies-using-foreach-c4cbcc070458

ext.app = [
        minSdk    : 21,
        targetSdk : 28,
        compileSdk: 28,
        buildTools: '28.0.3',
]

ext.repository = [
        jitpack: 'https://jitpack.io',
]

ext.addRepos = { RepositoryHandler handler ->
    handler.google()
    handler.jcenter()
    handler.maven { url repository.jitpack }
}

ext.java = [
        sourceCompatibility: JavaVersion.VERSION_1_8,
        targetCompatibility: JavaVersion.VERSION_1_8,
]

def versions = [
        googleServicesPlugin: '4.0.1',

        gradlePlugin        : '3.2.1',

        multidex            : '2.0.0',

        kotlin              : '1.3.10',

        supportLibrary      : '1.0.0',

        supportLibraryRC01  : '1.0.0-rc01',

        constraintLayout    : '1.1.2',

        archComp            : '2.0.0-rc01',

        dagger              : '2.16',

        retrofit            : '2.3.0',

        okHttp              : '3.8.1',

        gson                : '2.8.1',

        javaxInject         : '1',

        timber              : '4.5.1',

        firebase            : '16.0.5',

        firebaseAuth        : '4.2.1',

        rxJava                : '2.0.2',

        rxJava              : '2.0.2',
        rxKotlin            : '2.1.0',
        rxAndroid           : '2.0.2',

]

def pluginLibs = [
        //Google Services Gradle Plugin
        google : "com.google.gms:google-services:$versions.googleServicesPlugin",

        // Android Gradle Plugin
        android: "com.android.tools.build:gradle:$versions.gradlePlugin",

        // Kotlin Gradle Plugin
        kotlin : "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
]


ext.gradlePlugins = [
        android: pluginLibs.android,
        kotlin : pluginLibs.kotlin,
        google : pluginLibs.google,
]


def libraries = [
        // Multidex Support
        multidex           : "androidx.multidex:multidex:$versions.multidex",

        // Kotlin
        kotlin             : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin",

        // Support Libraries
        appCompatV7        : "androidx.appcompat:appcompat:$versions.supportLibrary",
        cardView           : "androidx.cardview:cardview:$versions.supportLibrary",
        recylerView        : "androidx.recyclerview:recyclerview:$versions.supportLibrary",
        supportV4          : "androidx.legacy:legacy-support-v4:$versions.supportLibrary",
        viewPager          : "androidx.viewpager:viewpager:$versions.supportLibrary",

        supportDesign      : "com.google.android.material:material:$versions.supportLibraryRC01",

        constraintLayout   : "androidx.constraintlayout:constraintlayout:$versions.constraintLayout",

        // Room
        roomRuntime        : "androidx.room:room-runtime:$versions.archComp",
        roomCompiler       : "androidx.room:room-compiler:$versions.archComp",

        // LifeCycle
        lifecycleCommon    : "androidx.lifecycle:lifecycle-common:$versions.archComp",
        lifecycleRuntime   : "androidx.lifecycle:lifecycle-runtime:$versions.archComp",
        lifeCycleExtensions: "androidx.lifecycle:lifecycle-extensions:$versions.archComp",
        lifeCycleCompiler  : "androidx.lifecycle:lifecycle-compiler:$versions.archComp",

        // Dagger
        dagger             : "com.google.dagger:dagger:$versions.dagger",
        daggerSupport      : "com.google.dagger:dagger-android-support:$versions.dagger",
        daggerCompiler     : "com.google.dagger:dagger-compiler:$versions.dagger",
        daggerProcessor    : "com.google.dagger:dagger-android-processor:$versions.dagger",

        // Network Libraries
        retrofit           : "com.squareup.retrofit2:retrofit:$versions.retrofit",
        retrofitConverter  : "com.squareup.retrofit2:converter-gson:$versions.retrofit",
        retrofitAdapter    : "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit",
        okHttp             : "com.squareup.okhttp3:okhttp:$versions.okHttp",
        okHttpLogger       : "com.squareup.okhttp3:logging-interceptor:$versions.okHttp",
        gson               : "com.google.code.gson:gson:$versions.gson",

        javaxInject        : "javax.inject:javax.inject:$versions.javaxInject",

        // Reactive
        rxJava             : "io.reactivex.rxjava2:rxandroid:$versions.rxJava",
        rxKotlin           : "io.reactivex.rxjava2:rxkotlin:$versions.rxKotlin",
        rxAndroid          : "io.reactivex.rxjava2:rxandroid:$versions.rxAndroid",

        //Timber
        timber             : "com.jakewharton.timber:timber:$versions.timber",

        //Firebase
        firebaseCore       : "com.google.firebase:firebase-core:$versions.firebase",
        firebaseAuth       : "com.firebaseui:firebase-ui-auth:$versions.firebaseAuth",

        //Test
        assertj            : "org.assertj:assertj-core:$versions.assertJ",

]

ext.appDependencies = [
        addDependency('implementation', libraries.multidex),

        addDependency('implementation', libraries.kotlin),

        addDependency('implementation', libraries.appCompatV7),
        addDependency('implementation', libraries.cardView),
        addDependency('implementation', libraries.recylerView),
        addDependency('implementation', libraries.supportV4),
        addDependency('implementation', libraries.viewPager),

        addDependency('implementation', libraries.supportDesign),

        addDependency('implementation', libraries.constraintLayout),

        addDependency('implementation', libraries.roomRuntime),
        addDependency('kapt', libraries.roomCompiler),

        addDependency('implementation', libraries.lifecycleCommon),
        addDependency('implementation', libraries.lifecycleRuntime),
        addDependency('implementation', libraries.lifeCycleExtensions),
        addDependency('kapt', libraries.lifeCycleCompiler),

        addDependency('implementation', libraries.dagger),
        addDependency('implementation', libraries.daggerSupport),
        addDependency('kapt', libraries.daggerCompiler),
        addDependency('kapt', libraries.daggerProcessor),

        //TODO: Data katmanı oluşursa oraya taşınacak
        addDependency('implementation', libraries.retrofit),
        addDependency('implementation', libraries.retrofitConverter),
        addDependency('implementation', libraries.retrofitAdapter),
        addDependency('implementation', libraries.okHttp),
        addDependency('implementation', libraries.okHttpLogger),
        addDependency('implementation', libraries.gson),

        addDependency('implementation', libraries.javaxInject),

        addDependency('implementation', libraries.rxKotlin),
        addDependency('implementation', libraries.rxAndroid),
        addDependency('implementation', libraries.rxJava),

        addDependency('implementation', libraries.timber),

        addDependency('implementation', libraries.firebaseCore),
        addDependency('implementation', libraries.firebaseAuth),

        //TODO: kullanılmazsa silinecek

        //test debug for room
        addDependency('debugImplementation', 'com.amitshekhar.android:debug-db:1.0.4'),
]

static def addDependency(config, dependency) {
    [configuration: config, dependency: dependency]
}

ext.addDependencies = { DependencyHandler handler, dependencies ->
    dependencies.each {
        if (it.options != null) {
            handler.add(it.configuration, it.dependency, it.options)
        } else {
            handler.add(it.configuration, it.dependency)
        }

    }
}
